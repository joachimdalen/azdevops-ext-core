trigger:
  none
  # batch: true
  # branches:
  #   include:
  #     - master
  # paths:
  #   exclude:
  #     - '*.md'
  #     - LICENSE
  #     - .azext
  #     - .vscode
  #     - docs
pr: none
pool:
  vmImage: ubuntu-latest

variables:
  isMaster: $[eq(variables['Build.SourceBranch'], 'refs/heads/master')]
  npm_config_cache: $(Pipeline.Workspace)/.npm

stages:
  - stage: buildAndTest
    displayName: Build & Test
    jobs:
      - job: 'build'
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: '16.x'
            displayName: 'Install Node.js'
          - task: Cache@2
            displayName: Cache npm
            inputs:
              key: 'npm | "$(Agent.OS)" | package-lock.json'
              path: '$(npm_config_cache)'
              restoreKeys: |
                npm | "$(Agent.OS)"
                npm | "$(Agent.OS)" | $(Build.SourcesDirectory)/package-lock.json
          - task: Npm@1
            displayName: 'Install dependencies'
            inputs:
              command: install
          - task: Npm@1
            displayName: 'Run tests'
            inputs:
              command: 'custom'
              customCommand: 'run test:ci'
          - task: Bash@3
            displayName: 'Move cover files'
            inputs:
              targetType: 'inline'
              script: |
                cp -r $(Build.SourcesDirectory)/coverage $(Build.ArtifactStagingDirectory)
          - task: Bash@3
            displayName: 'Move report'
            inputs:
              targetType: 'inline'
              script: |
                mkdir $(Build.ArtifactStagingDirectory)/reports
                cp $(Build.SourcesDirectory)/test-results.xml $(Build.ArtifactStagingDirectory)/reports/test-results.xml
          - task: Npm@1
            displayName: 'Build package'
            inputs:
              command: custom
              customCommand: 'run build'
          - task: Npm@1
            displayName: 'Package'
            inputs:
              command: custom
              customCommand: 'pack'
          - task: Bash@3
            displayName: 'Move files'
            inputs:
              targetType: inline
              script: |
                mkdir -p $(Build.ArtifactStagingDirectory)/npm
                mv *.tgz $(Build.ArtifactStagingDirectory)/npm/
          - task: Bash@3
            displayName: 'Get Package Version'
            name: SetVersion
            inputs:
              targetType: inline
              script: echo "##vso[task.setvariable variable=NPM_PACKAGE_VERSION;isoutput=true]$(npm pkg get version | tr -d '"')"
          - task: PublishPipelineArtifact@1
            displayName: 'Publish NPM Artifact'
            inputs:
              targetPath: '$(Build.ArtifactStagingDirectory)/npm'
              artifact: 'npm-package'
              publishLocation: 'pipeline'
          - task: PublishTestResults@2
            displayName: 'Publish test results'
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '$(Build.ArtifactStagingDirectory)/reports/test-results.xml'
          - task: PublishCodeCoverageResults@1
            displayName: 'Publish coverage'
            inputs:
              codeCoverageTool: 'Cobertura'
              summaryFileLocation: '$(Build.ArtifactStagingDirectory)/coverage/cobertura-coverage.xml'
              pathToSources: '$(Build.SourcesDirectory)/src'
          - task: Npm@1
            displayName: 'Build single version changelog'
            inputs:
              command: custom
              customCommand: run changelog -- --version $(SetVersion.NPM_PACKAGE_VERSION) --output v$(SetVersion.NPM_PACKAGE_VERSION).md
          - task: PublishPipelineArtifact@1
            displayName: 'Publish Changelog'
            inputs:
              targetPath: '$(Build.SourcesDirectory)/v$(SetVersion.NPM_PACKAGE_VERSION).md'
              artifact: 'changelog'
              publishLocation: 'pipeline'
  - stage: publishPackage
    displayName: 'Publish package'
    condition: and(succeeded(), eq(variables.isMaster, true))
    dependsOn: buildAndTest
    jobs:
      - deployment: 'publish'
        displayName: '[PROD] Publish package'
        variables:
          - name: PACKAGE_VERSION
            value: $[ stageDependencies.buildAndTest.build.outputs['SetVersion.NPM_PACKAGE_VERSION'] ]
        environment: 'npm-azdevops-ext-core-env'
        strategy:
          runOnce:
            deploy:
              steps:
                - download: none
                - download: current
                  displayName: 'Download Package'
                  artifact: 'npm-package'
                # - download: current
                #   artifact: "changelog"
                - task: Bash@3
                  inputs:
                    targetType: inline
                    script: 'ls $(Pipeline.Workspace)/npm-package'
                - task: Npm@1
                  displayName: 'Publish to NPM'
                  inputs:
                    command: custom
                    customEndpoint: NPMJS
                    customCommand: publish $(Pipeline.Workspace)/npm-package/joachimdalen-azdevops-ext-core-$(PACKAGE_VERSION).tgz --access public
